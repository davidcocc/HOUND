name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  DOCKER_IMAGE: urbansound-classifier
  DOCKER_TAG: ${{ github.sha }}
  DOCKER_REGISTRY: docker.io

jobs:
  # Job 1: Build and Test
  build-and-test:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Build Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./Dockerfile
        push: false
        load: true
        tags: ${{ env.DOCKER_IMAGE }}:${{ env.DOCKER_TAG }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Test Docker image
      run: |
        # Run container in detached mode
        docker run -d --name test-container ${{ env.DOCKER_IMAGE }}:${{ env.DOCKER_TAG }} sleep 30

        # Wait for container to be ready
        docker exec test-container python -c "import tensorflow as tf; print('TensorFlow OK:', tf.__version__)"
        docker exec test-container python -c "import librosa; print('Librosa OK:', librosa.__version__)"

        # Stop container
        docker stop test-container
        docker rm test-container

  # Job 2: Security Scan
  security-scan:
    runs-on: ubuntu-latest
    needs: build-and-test
    permissions:
      contents: read
      actions: read
      security-events: write

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Cache Trivy DB
      uses: actions/cache@v4
      with:
        path: ~/.cache/trivy
        key: trivy-db-${{ runner.os }}-v1
        restore-keys: |
          trivy-db-${{ runner.os }}-

    - name: Build Docker image for scanning
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./Dockerfile
        push: false
        tags: ${{ env.DOCKER_IMAGE }}:${{ env.DOCKER_TAG }}
        load: true

    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@0.28.0
      continue-on-error: true
      with:
        image-ref: ${{ env.DOCKER_IMAGE }}:${{ env.DOCKER_TAG }}
        format: 'sarif'
        output: 'trivy-results.sarif'
        severity: 'HIGH,CRITICAL'
        ignore-unfixed: true
        scanners: 'vuln'
        timeout: '20m'


  # Job 3: Lint Code (optional)
  lint:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install flake8 black isort

    - name: Lint with flake8
      run: |
        flake8 src/ --count --select=E9,F63,F7,F82 --show-source --statistics
        flake8 src/ --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

  # Job 4: Unit tests with reports (HTML + Coverage XML)
  unit-tests:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'

    - name: Install system libraries
      run: |
        sudo apt-get update
        sudo apt-get install -y libsndfile1

    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-cov pytest-html gradio

    - name: Run unit tests and generate reports
      run: |
        pytest -q \
          --maxfail=1 --disable-warnings \
          --cov=src \
          --cov-report=xml:coverage.xml \
          --cov-report=term-missing \
          --html=report.html --self-contained-html

    - name: Upload test artifacts
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: test-artifacts
        path: |
          report.html
          coverage.xml

  # Job 5: Publish Docker Image (only on main branch)
  publish:
    runs-on: ubuntu-latest
    needs: [build-and-test, security-scan]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Log in to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.DOCKER_REGISTRY }}/${{ github.repository_owner }}/${{ env.DOCKER_IMAGE }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}

    - name: Build and push Docker image
      id: push
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./Dockerfile
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}

    - name: Generate artifact attestation
      if: ${{ github.event_name != 'pull_request' }}
      uses: actions/attest-build-provenance@v1
      with:
        subject-name: ${{ env.DOCKER_REGISTRY }}/${{ github.repository_owner }}/${{ env.DOCKER_IMAGE}}
        subject-digest: ${{ steps.push.outputs.digest }}
        push-to-registry: true
